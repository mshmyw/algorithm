;;show the line number
( global-linum-mode 'linum-mode )



;defalut file  path
;(cd "/mnt/hgfs/virtualShare")
;(setq default-directory "/mnt/hgfs/virtualShare")


;(load-file "/mnt/hgfs/virtualShare")

;再把.emacs拷贝到/mnt/hgfs/virtualShare目录下，这个文件删掉上边这一句，加入下边几句：

;(setenv "HOME" "/mnt/hgfs/virtualShare")

;(setenv "PATH" "/mnt/hgfs/virtualShare")

;(setq default-directory "~/")

;(add-to-list 'load-path "~/emacs/site-lisp")



  ;;外观设置
;;颜色设置，其实有个color-theme.el可以将Emacs设置丰富多彩，非常漂亮，不过启动有些慢，我只是选择了一些颜色设置。
;;;;;去掉工具栏
(tool-bar-mode 0)
;;;;;去掉菜单栏，我将F10绑定为显示菜单栏，万一什么东西忘了，需要菜单栏了可以摁F10调出，再摁F10就去掉菜单
;(menu-bar-mode nil)
;;;;;不要滚动栏，现在都用滚轴鼠标了，可以不用滚动栏了
(scroll-bar-mode nil)
;;;;;改变emacs标题栏的标题
(setq frame-title-format "%b@Alex-GDLC")
;;;;;允许emacs和外部其他程序的粘贴
(setq x-select-enable-clipboard t)
;; 显示列号
(setq column-number-mode t)
;;开启语法高亮。
(global-font-lock-mode 1)
;;设置tab为4个空格的宽度
(setq default-tab-width 4)
(setq c-basic-offset 4)
;;;;;;;;;  设置界面 start
;(set-cursor-color "Wheat")
;(set-mouse-color "Wheat")
;(set-foreground-color "Wheat")
;(set-background-color "DarkSlateGray")


;;======================    color setting        =====================
;; 指针颜色设置为白色
(set-cursor-color "purple")
;; 鼠标颜色设置为白色
;;(set-mouse-color "white")
;; 设置背景颜色和字体颜色
;;(set-foreground-color "white")
;;(set-background-color "darkblue")
;; 设置另外一些颜色：语法高亮显示的背景和主题，区域选择的背景和主题，二次选择的背景和选择
;;(set-face-foreground 'highlight "white")
;;(set-face-background 'highlight "blue")
(set-face-foreground 'region "cyan")
(set-face-background 'region "blue")
(set-face-foreground 'secondary-selection "skyblue")
(set-face-background 'secondary-selection "darkblue")

;;设置日历的一些颜色
(setq calendar-load-hook
'(lambda ()
(set-face-foreground 'diary-face "skyblue")
(set-face-background 'holiday-face "slate blue")
(set-face-foreground 'holiday-face "white")))



(show-paren-mode t);高亮显示成对括号，但不来回弹
(setq show-paren-style 'parentheses)

(global-font-lock-mode t);语法高亮
(setq font-lock-maximum-decoration t);让emacs最大限度的“彩色化”你的程序
(auto-image-file-mode t);打开图片显示功能

(require 'hl-line) ;高亮当前行
(global-hl-line-mode t)




(if window-system
        (setq default-frame-alist
                (append
                        '( (top . 60)
                                 (left . 100)
                                             (width . 100)
                                             (height . 30))
                                                                  default-frame-alist))
)
;;;启动最大化
;;;(setq initial-frame-alist '((top . 0) (left . 0) (width . 97) (height . 49)))
;;;;;启用时间显示设置，在minibuffer上面的那个杠上（忘了叫什么来着）
(display-time-mode 1)
;;;;;时间使用24小时制
(setq display-time-24hr-format t)
;;;;;时间显示包括日期和具体时间
(setq display-time-day-and-date t)
;;;;;时间的变化频率，单位多少来着？
(setq display-time-interval 10)
;;;;;鼠标自动避开指针，如当你输入的时候，指针到了鼠标的位置，鼠标有点挡住视线了
(mouse-avoidance-mode 'animate)
;;;;;指针不要闪，我得眼睛花了
(blink-cursor-mode -1)
;;;高亮显示要拷贝的内容
(transient-mark-mode 1)
;;;;;当指针到一个括号时，自动显示所匹配的另一个括号
(show-paren-mode 1)
;;;;;是用滚轴鼠标
(mouse-wheel-mode t)
;;;;;备份设置
;;;;;emacs还有一个自动保存功能，默认在~/.emacs.d/auto-save-list里，这个非常有用，我这里没有改动，具体可以参见Sams teach yourself emacs in 24hours(我简称为sams24)
;;;;;启用版本控制，即可以备份多次
(setq version-control t)
;;;;;备份最原始的版本两次，记第一次编辑前的文档，和第二次编辑前的文档
(setq kept-old-versions 2)
;;;;;备份最新的版本五次，理解同上
(setq kept-new-versions 5)
;;;;;删掉不属于以上7中版本的版本
(setq delete-old-versions t)
;;;;;设置备份文件的路径
(setq backup-directory-alist '(("." . "~/.emacs.tmp")))
;;;;;备份设置方法，直接拷贝
(setq backup-by-copying t)
;; 自动存盘
(setq auto-save-mode t)
;;;;;去掉烦人的警告铃声
(setq visible-bell nil)
;;;;;滚动页面时比较舒服，不要整页的滚动
(setq scroll-step 1
        scroll-margin 3
        scroll-conservatively 10000)
;;;;;使用C-k删掉指针到改行末的所有东西
(setq-default kill-whole-line t)
;;;;;设定删除保存记录为200，可以方便以后无限恢复
(setq kill-ring-max 200)

(show-paren-mode t);高亮显示成对括号，但不来回弹
(setq show-paren-style 'parentheses)

(global-font-lock-mode t);语法高亮
(setq font-lock-maximum-decoration t);让emacs最大限度的“彩色化”你的程序
(auto-image-file-mode t);打开图片显示功能

;(require 'hl-line) ;高亮当前行
;(global-hl-line-mode t)

;-------------------------------------------------auto-complete----------------------------------------
(add-to-list 'load-path "~/.emacs.d/auto-complete-1.3.1")

;; After do this, isearch any string, M-: (match-data) always
;; return the list whose elements is integer
(require 'auto-complete)
(require 'auto-complete-config)
;一定要在(require 'auto-complete-config)，否则会报错，或者用setq或者eval-after-load
(add-to-list 'ac-dictionary-directories "~/.emacs.d/auto-complete-1.3.1/dict")
(global-auto-complete-mode t)
(ac-config-default)
(setq ac-auto-show-menu 0.2)
(setq ac-menu-height 20)
(set-face-background 'ac-candidate-face "lightgray")
(set-face-underline 'ac-candidate-face "darkgray")
(set-face-background 'ac-selection-face "steelblue")
(setq ac-use-menu-map t)
(define-key ac-menu-map "\C-n" 'ac-next)
(define-key ac-menu-map "\C-p" 'ac-previous)

(set-default 'ac-sources
'(ac-source-yasnippet
ac-source-abbrev
ac-source-words-in-buffer
ac-source-words-in-all-buffer
ac-source-imenu
ac-source-files-in-current-dir
ac-source-filename))



;---------------------------------自动补全括号,括号自动配对--------------------------------------
(defun my-common-mode-auto-pair () 
(interactive) 
(make-local-variable 'skeleton-pair-alist) 
(setq skeleton-pair-alist '( 
(? ? _ "''")
(? ? _ """")
(? ? _ "()")
(? ? _ "[]")
(?{ \n > _ \n ?} >)))
(setq skeleton-pair t)
(local-set-key (kbd "(") 'skeleton-pair-insert-maybe) 
(local-set-key (kbd "\"") 'skeleton-pair-insert-maybe) 
(local-set-key (kbd "{") 'skeleton-pair-insert-maybe) 
(local-set-key (kbd "\'") 'skeleton-pair-insert-maybe) 
(local-set-key (kbd "[") 'skeleton-pair-insert-maybe)) 
(add-hook 'LaTeX-mode-hook 'my-common-mode-auto-pair) 
(add-hook 'c-mode-hook 'my-common-mode-auto-pair) 
(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(blink-cursor-mode nil)
 '(column-number-mode t)
 '(display-time-mode t)
 '(show-paren-mode t))





(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 )
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background "white" :foreground "black" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 128 :width normal :foundry "unknown" :family "WenQuanYi Micro Hei Mono")))))




;(package-initialize)

(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(add-hook 'org-mode-hook 'turn-on-font-lock)
(add-hook 'org-mode-hook 
  (lambda () (setq truncate-lines nil)))

(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)

;; comment for c and other language
(global-set-key [?\C-c ?\C-/] 'comment-or-uncomment-region)
(defun my-comment-or-uncomment-region (beg end &optional arg)
  (interactive (if (use-region-p)
                   (list (region-beginning) (region-end) nil)
                 (list (line-beginning-position)
                       (line-beginning-position 2))))
  (comment-or-uncomment-region beg end arg)
  )
(global-set-key [remap comment-or-uncomment-region] 'my-comment-or-uncomment-region)
